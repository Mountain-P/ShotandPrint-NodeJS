#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

// var http_port = normalizePort(process.env.PORT || '3000');
// var https_port = process.env.PORT_HTTPS || 443;
var http_port = "3000";
var https_port = "443";
app.set('port', https_port);
var options = {
    key: fs.readFileSync('./bin/server.key'),
    cert: fs.readFileSync('./bin/server.crt')
};

/**
 * Create HTTPS server.
 */

// var server = http.createServer(app);

/**
 * Create HTTPS server.
 */

var server = https.createServer(options, app).listen(https_port);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(http_port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Redirect from http port to https
 */

http.createServer(function(req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(http_port, https_port) + req.url });
    console.log("http requet, will go to >> ");
    console.log("https://" + req.headers['host'].replace(http_port, https_port) + req.url);
    res.end();
}).listen(http_port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}